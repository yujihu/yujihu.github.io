<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>核心Diff算法</title>
      <link href="/2020/09/19/diff/"/>
      <url>/2020/09/19/diff/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>虚拟DOM的核心之一就是它的Diff算法，其中最为核心的就是核心Diff算法，只有在新旧虚拟DOM的子节点都是多个的时候，核心Diff算法才会派上用场。</p><p>无论何种类型的核心Diff算法，它们采用的核心思想是一致的：</p><ul><li>1、找到需要移动的节点，并移动它们；</li><li>2、添加新的节点；</li><li>3、移除不存在的节点。</li></ul><p>新旧虚拟DOM子节点的可能情况如下：</p><table><thead><tr><th align="center">旧的children的个数</th><th align="center">新的children的个数</th><th>操作</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td>patch</td></tr><tr><td align="center">1</td><td align="center">0</td><td>remove</td></tr><tr><td align="center">1</td><td align="center">n</td><td>remove旧的子节点，mount新的子节点</td></tr><tr><td align="center">0</td><td align="center">1</td><td>mount</td></tr><tr><td align="center">0</td><td align="center">0</td><td>无操作</td></tr><tr><td align="center">0</td><td align="center">n</td><td>mount</td></tr><tr><td align="center">n</td><td align="center">1</td><td>remove旧的子节点，mount新的子节点</td></tr><tr><td align="center">n</td><td align="center">0</td><td>remove</td></tr><tr><td align="center">n</td><td align="center">n</td><td>核心Diff</td></tr></tbody></table><h3 id="虚拟DOM的结构"><a href="#虚拟DOM的结构" class="headerlink" title="虚拟DOM的结构"></a>虚拟DOM的结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface VNode &#123;</span><br><span class="line">  _isVNode: <span class="literal">true</span>                  <span class="comment">// _isVNode是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象</span></span><br><span class="line">  el: Element | <span class="literal">null</span>              <span class="comment">// 当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM</span></span><br><span class="line">  flags: VNodeFlags</span><br><span class="line">  tag: string | FunctionalComponent | ComponentClass | <span class="literal">null</span></span><br><span class="line">  data: VNodeData | <span class="literal">null</span></span><br><span class="line">  children: VNodeChildren</span><br><span class="line">  childFlags: ChildrenFlags</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>_isVNode：是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象。</li><li>el：当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM。</li><li>flags：VNode 的类型。</li><li>tag：标签名称。</li><li>data： VNode 数据，用于对 VNode 进行描述。假如一个 VNode 的类型是 html 标签，则 VNodeData 中可以包含 class、style 以及一些事件。</li><li>children：子节点。</li><li>childFlags：子节点的类型。</li></ul><h3 id="无key时的核心Diff算法"><a href="#无key时的核心Diff算法" class="headerlink" title="无key时的核心Diff算法"></a>无key时的核心Diff算法</h3><p>我们经常会遇到一个可排序的列表，假设我们又一个由<code>li</code>标签组成的列表，它们是<code>ul</code>标签子节点，我们可以使用下面的数组来表示 ul 标签的 children：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">2</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">3</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着由于数据变化导致了列表的顺序发生了变化，新的列表顺序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">3</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们能够注意到：更新前后的真实 DOM 元素都是 li 标签。我们可以复用 li 标签，这样就能减少“移除”和“新建” DOM 元素带来的性能开销。当新旧 VNode 所描述的是相同标签时，那么这两个 VNode 之间的差异就仅存在于 VNodeData 和 children 上，所以我们完全可以通过遍历新旧 VNode，并一一比对它们，这样对于任何一个 DOM 元素来说，由于它们都是相同的标签，所以更新的过程是不会“移除”和“新建”任何 DOM 元素的，而是复用已有 DOM 元素，需要更新的只有 VNodeData 和 children。</p><p>更新操作如下图表示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff2.png" alt="diff2"></p><p>当新的 children 比旧的 children 的长度要长时，多出来的子节点是没办法应用 patch 函数的，此时我们应该把多出来的子节点作为新的节点添加上去。类似的，如果新的 children 比旧的 children 的长度要短时，我们应该把旧的 children 中多出来的子节点移除，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff3.png" alt="diff3"><br><img src= "/img/loading.gif" data-lazy-src="diff4.png" alt="diff4"></p><h3 id="React的核心Diff算法"><a href="#React的核心Diff算法" class="headerlink" title="React的核心Diff算法"></a>React的核心Diff算法</h3><p>前面，我们通过减少 DOM 操作的次数使得更新的性能得到了提升，但它仍然存在可优化的空间。我们通过观察新旧 children 可以很容易的发现：新旧 children 中的节点只有顺序是不同的，所以最佳的操作应该是通过移动元素的位置来达到更新的目的。</p><p>能够移动元素的关键在于：我们需要在新旧 children 的节点中保存映射关系，以便我们能够在旧 children 的节点中找到可复用的节点。这时候我们就需要给 children 中的节点添加唯一标识，也就是我们常说的 key，在没有 key 的情况下，我们是没办法知道新 children 中的节点是否可以在旧 children 中找到可复用的节点的。</p><p>为了明确的知道新旧 children 中节点的映射关系，我们需要在 VNode 创建伊始就为其添加唯一的标识，即 key 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧 children</span></span><br><span class="line">[</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;, <span class="number">2</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;, <span class="number">3</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 新 children</span></span><br><span class="line">[</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;, <span class="number">3</span>)</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="number">1</span>),</span><br><span class="line">  h(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;, <span class="number">2</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>有了 key 我们就能够明确的知道新旧 children 中节点的映射关系，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff5.png" alt="diff5"></p><p>知道了映射关系，我们就很容易判断新 children 中的节点是否可被复用：只需要遍历新 children 中的每一个节点，并去旧 children 中寻找是否存在具有相同 key 值的节点。</p><p>现在我们已经找到了可复用的节点，并进行了合适的更新操作，下一步需要做的，就是判断一个节点是否需要移动以及如何移动。</p><p>我们可以先考虑不需要移动的情况，当新旧 children 中的节点顺序不变时，就不需要额外的移动操作，如下：</p><p><img src= "/img/loading.gif" data-lazy-src="diff6.png" alt="diff6"></p><ul><li>1、取出新 children 的第一个节点，即 li-a，并尝试在旧 children 中寻找 li-a，结果是我们找到了，并且 li-a 在旧 children 中的索引为 0。</li><li>2、取出新 children 的第二个节点，即 li-b，并尝试在旧 children 中寻找 li-b，也找到了，并且 li-b 在旧 children 中的索引为 1。</li><li>3、取出新 children 的第三个节点，即 li-c，并尝试在旧 children 中寻找 li-c，同样找到了，并且 li-c 在旧 children 中的索引为 2。</li></ul><p>总结一下我们在“寻找”的过程中，先后遇到的索引顺序为：0-&gt;1-&gt;2。这是一个递增的顺序，这说明如果在寻找的过程中遇到的索引呈现递增趋势，则说明新旧 children 中节点顺序相同，不需要移动操作。相反的，如果在寻找的过程中遇到的索引值不呈现递增趋势，则说明需要移动操作。</p><p>我们在寻找过程中有一个重要的数字，寻找过程中在旧 children 中所遇到的最大索引值。如果在后续寻找的过程中发现存在索引值比最大索引值小的节点，意味着该节点需要被移动。</p><p>现在我们已经有办法找到需要移动的节点了，接下来要解决的问题就是：应该如何移动这些节点？为了弄明白这个问题，我们还是先来看下图：</p><p><img src= "/img/loading.gif" data-lazy-src="diff7.png" alt="diff7"></p><p>新 children 中的第一个节点是 li-c，它在旧 children 中的索引为 2，由于 li-c 是新 children 中的第一个节点，所以它始终都是不需要移动的，只需要调用 patch 函数更新即可。</p><p>li-c 节点更新完毕，接下来是新 children 中的第二个节点 li-a，它在旧 children 中的索引是 0，由于 0 &lt; 2 所以 li-a 是需要移动的节点。新 children 中的节点顺序实际上就是更新完成之后节点应有的最终顺序，只需把 li-a 节点对应的真实 DOM 移动到 li-c 节点所对应真实 DOM 的后面。</p><p>当新 children 中包含了一个全新的节点时，我们尝试在旧的 children 中寻找该节点时，是找不到可复用节点的，这时就没办法通过移动节点来完成更新操作。此时应该将该节点挂载到合适的位置。</p><p>除了要将全新的节点添加到容器元素之外，我们还应该把已经不存在了的节点移除。在我们遍历完新 children 后，再遍历一次旧的 children ，并尝试拿着旧 children 中的节点去新 children 中寻找相同的节点，如果找不到则说明该节点已经不存在于新 children 中了，这时我们应该将该节点对应的真实 DOM 移除。</p><p>至此，第一个完整的 Diff 算法我们就讲解完毕了，这个算法就是 React 所采用的 Diff 算法。但该算法仍然存在可优化的空间。</p><h3 id="Vue2-x的核心Diff算法"><a href="#Vue2-x的核心Diff算法" class="headerlink" title="Vue2.x的核心Diff算法"></a>Vue2.x的核心Diff算法</h3><p>React 的 Diff 算法是存在优化空间的，想要要找到优化的关键点，我们首先要知道它存在什么问题。来看下图：</p><p><img src= "/img/loading.gif" data-lazy-src="diff8.png" alt="diff8"></p><p>在这个例子中，我们可以通过肉眼观察从而得知最优的解决方案应该是：把 li-c 节点对应的真实 DOM 移动到最前面即可，只需要一次移动即可完成更新。然而，React 所采用的 Diff 算法在更新如上案例的时候，会进行两次移动。</p><p>采用双端比较的方式，可以来避免多余的DOM移动操作。所谓双端比较，就是同时从新旧 children 的两端开始进行比较的一种方式，所以我们需要四个索引值，分别指向新旧 children 的两端，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff9.png" alt="diff9"></p><p>在一次比较过程中，最多需要进行四次比较：</p><ul><li>1、使用旧 children 的头一个 VNode 与新 children 的头一个 VNode 比对，即 oldStartVNode 和 newStartVNode 比较对。</li><li>2、使用旧 children 的最后一个 VNode 与新 children 的最后一个 VNode 比对，即 oldEndVNode 和 newEndVNode 比对。</li><li>3、使用旧 children 的头一个 VNode 与新 children 的最后一个 VNode 比对，即 oldStartVNode 和 newEndVNode 比对。</li><li>4、使用旧 children 的最后一个 VNode 与新 children 的头一个 VNode 比对，即 oldEndVNode 和 newStartVNode 比对。</li></ul><p>在如上四步比对过程中，试图去寻找可复用的节点，即拥有相同 key 值的节点。这四步比对中，在任何一步中寻找到了可复用节点，则会停止后续的步骤，可以用下图来描述在一次比对过程中的四个步骤：</p><p><img src= "/img/loading.gif" data-lazy-src="diff10.png" alt="diff10"></p><p>每次比对完成之后，如果在某一步骤中找到了可复用的节点，我们就需要将相应的位置索引后移/前移一位。以上图为例：</p><ul><li>第一步：拿旧 children 中的 li-a 和新 children 中的 li-d 进行比对，由于二者 key 值不同，所以不可复用，什么都不做。</li><li>第二步：拿旧 children 中的 li-d 和新 children 中的 li-c 进行比对，同样不可复用，什么都不做。</li><li>第三步：拿旧 children 中的 li-a 和新 children 中的 li-c 进行比对，什么都不做。</li><li>第四步：拿旧 children 中的 li-d 和新 children 中的 li-d 进行比对，由于这两个节点拥有相同的 key 值，所以我们在这次比对的过程中找到了可复用的节点。</li></ul><p>由于我们在第四步的比对中找到了可复用的节点，这说明：li-d 节点所对应的真实 DOM 原本是最后一个子节点，并且更新之后它应该变成第一个子节点。所以我们需要把 li-d 所对应的真实 DOM 移动到最前方即可。</p><p>对于上面的四步比较，需要进行移动操作的其实只有两步，包括刚刚的第四步，以及第三步。如果在第三步中找到了可以复用的节点，说明该节点原本是第一个节点，在更新后变成了最后一个节点，所以需要把它对应的真是 DOM 移动到最后面即可。</p><p>下面来处理非理想的情况，如果在上述四个步骤中均无法找到可以复用的节点，我们只能拿新 children 中的第一个节点尝试去旧 children 中寻找，试图找到拥有相同 key 值的节点。如果找到则意味着：旧 children 中的这个节点所对应的真实 DOM 在新 children 的顺序中，已经变成了第一个节点。所以我们需要把该节点所对应的真实 DOM 移动到最前头。</p><p>我们尝试拿着新 children 中的第一个节点去旧 children 中寻找与之拥有相同 key 值的可复用节点，然后并非总是能够找得到，当新的 children 中拥有全新的节点时，就会出现找不到的情况，我们应该将其挂载到容器中。</p><p>同时我们需要考虑循环结束后新 children 有剩余节点的情况，此时也需要将剩余的节点挂载到容器中。</p><p>最后一个需要考虑的情况是：当有元素被移除时的情况。如果在循环结束后旧的 children 有剩余测节点，则这些剩余的节点需要被移除。</p><p>以上就是相对完整的双端比较算法的实现，这是 Vue2.x 所采用的算法，借鉴于开源项目：<a href="https://github.com/snabbdom/snabbdom">snabbdom</a>。</p><h3 id="Vue3-x的核心Diff算法"><a href="#Vue3-x的核心Diff算法" class="headerlink" title="Vue3.x的核心Diff算法"></a>Vue3.x的核心Diff算法</h3><p>优化核心Diff算法，本质上还是要避免核心Diff算法的执行。所以在真正执行核心Diff算法前先进行预处理，去除相同的前缀与后缀节点，仅对它们执行 patch 操作。</p><p><img src= "/img/loading.gif" data-lazy-src="diff11.png" alt="diff11"></p><p>在去掉相同的前缀与后缀节点后，如果新旧 children 均有剩余节点，此时需要执行核心Diff算法。</p><p>无论是 React 的 Diff 算法，还是 Vue2(snabbdom) 的 Diff 算法，其重点无非就是：判断是否有节点需要移动，以及应该如何移动和寻找出那些需要被添加或移除的节点。</p><p>首先，我们需要构造一个数组 source，该数组的长度等于新 children 在经过预处理之后剩余未处理节点的数量，并且该数组中每个元素的初始值为 -1，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff12.png" alt="diff12"></p><p>source 数组将用来存储新 children 中的节点在旧 children 中的位置，后面将会使用它计算出一个最长递增子序列，并用于 DOM 移动。如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff13.png" alt="diff13"></p><p>可以看到 source 数组的第四个元素值仍然为初始值 -1，这是因为新 children 中的 li-g 节点不存在于旧 children 中。除此之外，还有一件很重要的事儿需要做，即判断是否需要移动节点，判断的方式类似于 React 所采用的方式。</p><p>对于移动节点，我们会根据 source 数组计算出一个最长递增子序列，并用于 DOM 移动操作。</p><p>出数组 source 的最长递增子序列为 [ 0, 1 ]。我们知道 source 数组的值为 [2, 3, 1, -1]，很显然最长递增子序列应该是 [ 2, 3 ]，但为什么计算出的结果是 [ 0, 1 ] 呢？其实 [ 0, 1 ] 代表的是最长递增子序列中的各个元素在 source 数组中的位置索引，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="diff14.png" alt="diff14"></p><p>我们对新 children 中的剩余未处理节点进行了重新编号，li-c 节点的位置是 0，以此类推。而最长递增子序列是 [ 0, 1 ] 这告诉我们：新 children 的剩余未处理节点中，位于位置 0 和位置 1 的节点的先后关系与他们在旧 children 中的先后关系相同。或者我们可以理解为位于位置 0 和位置 1 的节点是不需要被移动的节点，即上图中 li-c 节点和 li-d 节点将在接下来的操作中不会被移动。换句话说只有 li-b 节点和 li-g 节点是可能被移动的节点，但是我们发现与 li-g 节点位置对应的 source 数组元素的值为 -1，这说明 li-g 节点应该作为全新的节点被挂载，所以只有 li-b 节点需要被移动。</p><p>使用两个索引 i 和 j 分别指向新 children 中剩余未处理节点的最后一个节点和最长递增子序列数组中的最后一个位置，并从后向前遍历。判断当前节点的位置索引值 i 是否与子序列中位于 j 位置的值相等，如果不相等，则说明该节点需要被移动；如果相等则说明该节点不需要被移动，并且会让 j 指向下一个位置。为了将节点挂载到正确的位置，我们需要找到当前节点的真实位置索引(i + nextStart)，以及当前节点的后一个节点，并挂载该节点的前面即可。</p><p>对于最长递增子序列的求解，这是一个算法题，使用动态规划进行求解，感兴趣的同学可以查阅相关资料。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论是 React 的 Diff 算法，还是 Vue2(snabbdom) 的 Diff 算法，抑或是 Vue3 的核心 Diff 算法，其重点无非就是：判断是否有节点需要移动，以及应该如何移动和寻找出那些需要被添加或移除的节点。</p><p>核心 Diff 算法的目的是避免创建和移除 DOM 的开销，尽可能的复用节点，只是进行 patch，并移动。而复用的关键是新旧 children 的节点保持映射关系，通常开发者通过指定 key prop 来暗示某些节点在不同的渲染下保持稳定。</p><p>核心 Diff 算法最好的优化手段就是避免它们的执行。</p>]]></content>
      
      
      <categories>
          
          <category> diff </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> diff </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人博客搭建</title>
      <link href="/2020/08/30/hexo/"/>
      <url>/2020/08/30/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客其实很简单，但要注意很多细节问题，之前本人也搭建过博客，那时也踩过一些坑，但是现在重新搭建博客，感觉自己又把之前踩过的坑又踩了一遍。所以为了避免以后搭建博客采坑，所以在此记录一下搭建博客的全流程以及一些注意事项。<br>本文搭建的博客基于<a href="https://hexo.io/zh-cn/">Hexo</a>，主题选用<a href="https://demo.jerryc.me/posts/21cfbf15/">Butterfly</a>，使用<a href="https://travis-ci.com/">Travis CI</a>自动部署到Github Pages和Coding Pages上，并在腾讯云上申请个人域名与博客进行绑定。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装Hexo并初始化博客，这个没啥好说的，按照<a href="https://hexo.io/zh-cn/">Hexo官网</a>指示安装初始化即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g     <span class="comment"># 全局安装hexo-cli脚手架，如果不想全局安装，那就使用npx安装</span></span><br><span class="line">$ hexo init blog              <span class="comment"># 初始化博客</span></span><br><span class="line">$ <span class="built_in">cd</span> blog                     <span class="comment"># 进入博客根目录</span></span><br><span class="line">$ npm install                 <span class="comment"># 安装依赖</span></span><br><span class="line">$ hexo s                      <span class="comment"># 本地预览</span></span><br></pre></td></tr></table></figure><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>本文的博客使用<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/master">Butterfly</a>，个人觉得这个主题比较好看，大家可以根据自己的喜好进行选择。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>在博客根目录中执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b 3.0.1 https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 此处我们使用的主题版本是3.0.1，建议大家固定使用一个主题版本，因为不同的主题版本的配置有所不同。在每次自动化部署时都需要重新安装主题，如果指定的是<code>master</code>，那每次安装的都是最新版本，会导致部署失败！</p><p>这里所说的版本，即tag，大家可以到主题的仓库中查找最新的tag并使用。</p><p><img src= "/img/loading.gif" data-lazy-src="tag.png" alt="主题tag"></p><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改站点配置文件_config.yml，把主题改为 butterfly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>把主题文件夹中的 _config.yml 复制到 Hexo 根目录里，同时重新命名为 _config.butterfly.yml。</p><p>Hexo 会自动合并主题中的_config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用_config.butterfly.yml 的配置，其优先度较高。</p><h3 id="配置标签页"><a href="#配置标签页" class="headerlink" title="配置标签页"></a>配置标签页</h3><ul><li>1.在博客根目录中输入<code>hexo new page tags</code></li><li>2.找到 source/tags/index.md 这个文件</li><li>3.修改为：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-08-29 19:14:29</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置分类页"><a href="#配置分类页" class="headerlink" title="配置分类页"></a>配置分类页</h3><ul><li>1.在博客根目录中输入<code>hexo new page categories</code></li><li>2.找到 source/categories/index.md 这个文件</li><li>3.修改为：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-08-29 19:15:35</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置友情链接"><a href="#配置友情链接" class="headerlink" title="配置友情链接"></a>配置友情链接</h3><ul><li>1.在博客根目录中输入<code>hexo new page link</code></li><li>2.找到 source/link/index.md 这个文件</li><li>3.修改为：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2020-08-29 19:10:49</span><br><span class="line">type: &quot;link&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>4.添加友情链接：</li></ul><p>在博客目录中的 source/_data，创建一个文件 link.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友链</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">YolkPie</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://yolkpie.net/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/img/yolkpie.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">前端研发部</span></span><br><span class="line">    <span class="attr">2:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Yolk</span> <span class="string">CLI</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://yolkpie.net/yolk-cli/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/img/yolkcli.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">前端项目脚手架</span></span><br><span class="line">    <span class="attr">3:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Yolk</span> <span class="string">Works</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://yolkpie.net/yolkworks-list/#/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/img/yolkworks.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">海量模板及组件</span></span><br></pre></td></tr></table></figure><h3 id="配置关于自己"><a href="#配置关于自己" class="headerlink" title="配置关于自己"></a>配置关于自己</h3><ul><li>1.在博客根目录中输入<code>hexo new page about</code></li><li>2.找到 source/about/index.md 这个文件</li><li>3.修改为：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于我</span><br><span class="line">date: 2020-08-29 19:16:57</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="配置博客语言"><a href="#配置博客语言" class="headerlink" title="配置博客语言"></a>配置博客语言</h3><p>修改博客配置文件 <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="配置导航菜单"><a href="#配置导航菜单" class="headerlink" title="配置导航菜单"></a>配置导航菜单</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h3 id="配置相关图片"><a href="#配置相关图片" class="headerlink" title="配置相关图片"></a>配置相关图片</h3><p>包括网站图标、头像、首页顶部图片、文章页面顶部默认图、文章封面默认图、其他页面顶部默认图等等。</p><p>如果想要使用本地图片，在<code>source</code>目录下创建<code>img</code>目录，在图片放到该目录下，这样我们就可以使用<code>/img/avatar.jpg</code>访问到本地图片。</p><h3 id="配置本地搜索"><a href="#配置本地搜索" class="headerlink" title="配置本地搜索"></a>配置本地搜索</h3><ul><li>1.安装 <code>hexo-generator-search</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li>2.修改站点配置文件_config.yml，添加：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>3.修改主题配置文件_config.butterfly.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置评论"><a href="#配置评论" class="headerlink" title="配置评论"></a>配置评论</h3><p>本博客的评论基于<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">Gitalk</a>，Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p><ul><li>1.选择一个公共github存储库（已存在或创建一个新的github存储库）用于存储评论，一般选择我们的Github Pages。</li><li>2.创建 GitHub Application，如果没有<a href="https://github.com/settings/applications/new">点击这里申请</a>，<code>Authorization callback URL</code>填写当前使用插件页面的域名。</li><li>3.修改主题配置文件_config.butterfly.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">你的client</span> <span class="string">id</span> </span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">你的client</span> <span class="string">secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的github仓库</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">你的github用户名</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="string">该仓库的拥有者或协作者</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># en, zh-CN, zh-TW, es-ES, fr, ru</span></span><br><span class="line">  <span class="attr">perPage:</span> <span class="number">10</span> <span class="comment"># Pagination size, with maximum 100.</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span> <span class="comment"># Facebook-like distraction free mode.</span></span><br><span class="line">  <span class="attr">pagerDirection:</span> <span class="string">last</span> <span class="comment"># Comment sorting direction, available values are last and first.</span></span><br><span class="line">  <span class="attr">createIssueManually:</span> <span class="literal">false</span> <span class="comment"># Gitalk will create a corresponding github issue for your every single page automatically</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li><a href="https://demo.jerryc.me/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a></li><li><a href="https://demo.jerryc.me/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a></li></ul><h2 id="写篇博客"><a href="#写篇博客" class="headerlink" title="写篇博客"></a>写篇博客</h2><p>一般博客会引用一些图片，如果想要使用本地图片，则配置<code>_config.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>执行<code>hexo new &lt;title&gt;</code>创建一篇文章，可以发现<code>source/_posts</code>目录下多出了<code>&lt;title&gt;</code>目录及<code>&lt;title&gt;.md</code>，其中<code>&lt;title&gt;.md</code>用于我们写博客，<code>&lt;title&gt;</code>目录用于存放我们博客使用的图片。</p><p>文章的配置，下面是我本篇文章的配置，大家可以参考：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">基于Hexo的个人博客搭建</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-08-30 10:45:29</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">hexo,Butterfly</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">搭建博客其实很简单，但要注意很多细节问题，之前本人也搭建过博客，那时也踩过一些坑，但是现在重新搭建博客，感觉自己又把之前踩过的坑又踩了一遍。所以为了避免以后搭建博客采坑，所以在此记录一下搭建博客的全流程以及一些注意事项。</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/img/hexo.jpg</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">hexo.jpg</span></span><br></pre></td></tr></table></figure><ul><li>title：文章标题</li><li>tags：文章标签</li><li>categories：文章分类</li><li>cover：文章封面</li><li>top_img：文章顶部图片</li></ul><h2 id="github托管"><a href="#github托管" class="headerlink" title="github托管"></a>github托管</h2><p>将我们博客的源代码托管到github上，在github上创建代码仓库，将我们博客的源代码push上去即可。</p><h2 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h2><p>新建一个repo，仓库名字为<code>xxx.github.io</code>，其中xxx为你github的username。</p><h2 id="coding-pages"><a href="#coding-pages" class="headerlink" title="coding pages"></a>coding pages</h2><ul><li>1.新建一个<code>coding.net</code>团队，如果你已经拥有自己的团队，那么久不需要创建团队了。</li><li>2.创建一个DevOps项目。</li><li>3.在项目下创建代码仓库，用于托管博客静态资源，仓库名字为<code>xxx.coding.io</code>。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="project.png" alt="project"></p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><ul><li><p>1.在博客根目录下创建<code>.travis.yml</code>文件，并写入自动化脚本：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">-b</span> <span class="number">3.0</span><span class="number">.1</span> <span class="string">https://github.com/jerryc127/hexo-theme-butterfly.git</span> <span class="string">themes/butterfly</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-rf</span> <span class="string">source/img/*</span> <span class="string">themes/butterfly/source/img/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;$&#123;U_NAME&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$&#123;U_EMAIL&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-rf</span> <span class="string">public/*</span> <span class="string">yujihu.github.io/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./yujihu.github.io</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&#x27;travis-ci auto build yujihu-blog&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">&quot;$&#123;P_BRANCH&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">../</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">&quot;https://$&#123;U_NAME2&#125;:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-rf</span> <span class="string">public/*</span> <span class="string">yujihu.coding.io/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./yujihu.coding.io</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&#x27;travis-ci auto build yujihu-blog&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">&quot;$&#123;P_BRANCH&#125;&quot;</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>node_js: 与我们本地开发的node.js版本保持一致。</p></li><li><p>before_install：全局安装hexo脚手架。</p></li><li><p>install：安装博客的依赖。</p></li><li><p>script： 此处为生成博客静态资源的代码，需要将source/img复制到themes/butterfly/source/img下面，否则会导致图片无法访问。</p></li><li><p>after_success：生成成功后，将静态资源分别提交至github pages和coding pages仓库。</p></li><li><p>环境变量：<code>$&#123;***&#125;</code> 这块后面会提到。</p></li><li><p>2.Github 增加一个 Personal access tokens，位置在<a href="https://github.com/settings/tokens">Settings/Developer settings</a>。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="token.png" alt="token"></p><ul><li>3.Coding 增加一个访问令牌，位置在<code>个人账户设置/访问令牌</code>。 </li></ul><p><img src= "/img/loading.gif" data-lazy-src="coding.png" alt="token"></p><ul><li>4.进入<a href="https://travis-ci.com/">Travis CI</a>，使用 Github登陆， 进入<a href="https://travis-ci.com/dashboard">dashboard</a>，此时应该可以看到你刚创建的项目。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="travis1.png" alt="travis1"></p><ul><li>5.进入该项目的setting，配置环境变量</li></ul><p><img src= "/img/loading.gif" data-lazy-src="travis2.png" alt="travis2"></p><blockquote><p>GH_REF: Github Pages项目地址<code>github.com/[name]/[name].github.io.git</code>注意去掉 https://。<br>CO_REF: Coding Pages项目地址<code>e.coding.net/[name]/[name].coding.io/[name].coding.io.git</code>注意去掉 https://。<br>GH_TOKEN: Github Token，是通过上面第2步拿到的。<br>CO_TOKEN: Coding Token，是通过上面第3步拿到的。<br>P_BRANCH: 要上传的分支，这里我们要传到 master。<br>U_EMAIL: 你的 Github 邮箱。<br>U_NAME: 你的 Github 用户名。<br>U_NAME2: 你的 Coding 用户名，这个很关键，一定要设置正确。</p></blockquote><ul><li>6.将博客源代码push到远程仓库，我们可以发现<code>Travis CI</code>会开启一次自动构建。</li></ul><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>1.在腾讯云上购买一个域名，首年一般很便宜，大家可以先买一年试试，域名可以不备案，但需要实名认证。<br>2.开启Github Pages，在[name].github.io的setting中进行配置。</p><p><img src= "/img/loading.gif" data-lazy-src="github2.png" alt="github2"></p><p>3.开启Coding Pages, 在<code>项目/持续部署/静态网站</code>下进行配置。</p><p><img src= "/img/loading.gif" data-lazy-src="coding2.png" alt="coding2"><br><img src= "/img/loading.gif" data-lazy-src="coding3.png" alt="coding3"></p><p>4.配置域名解析</p><p>进入刚刚购买域名的管理控制台，配置域名解析规则，境内CNAME到Coding Pages，境外CNAME到Github Pages.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt.js</title>
      <link href="/2020/08/29/nuxtjs/"/>
      <url>/2020/08/29/nuxtjs/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuxt-js是什么？"><a href="#Nuxt-js是什么？" class="headerlink" title="Nuxt.js是什么？"></a>Nuxt.js是什么？</h2><blockquote><ul><li>一个基于 <code>Vue.js</code> 的通用应用框架</li><li>基于它初始化新项目的基础结构代码，或者在已有 <code>Node.js</code> 项目中使用</li><li>预设了利用 <code>Vue.js</code> 开发服务端渲染的应用所需要的各种配置</li><li>提供了一种命令叫：nuxt generate，为基于 Vue.js 的应用提供生成对应的静态站点的功能</li><li>为 <code>客户端/服务端</code> 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等</li></ul></blockquote><h2 id="Nuxt-js的特性"><a href="#Nuxt-js的特性" class="headerlink" title="Nuxt.js的特性"></a>Nuxt.js的特性</h2><blockquote><ul><li>基于 Vue.js</li><li>自动代码分层</li><li>服务端渲染</li><li>强大的路由功能，支持异步数据</li><li>静态文件服务</li><li>ES6/ES7 语法支持</li><li>打包和压缩 JS 和 CSS</li><li>HTML头部标签管理</li><li>本地开发支持热加载</li><li>集成ESLint</li><li>支持各种样式预处理器： SASS、LESS、 Stylus等等</li><li>支持HTTP/2 推送</li></ul></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── assets&#x2F;        # 资源目录 assets 用于组织未编译的静态资源如 LESS、SASS 或 JavaScript</span><br><span class="line">├── components&#x2F;    # 组件目录 components 用于组织应用的 Vue.js 组件。Nuxt.js 不会扩展增强该目录下 Vue.js 组件，即这些组件不会像页面组件那样有 asyncData 方法的特性。</span><br><span class="line">├── layouts&#x2F;       # 布局目录 layouts 用于组织应用的布局组件</span><br><span class="line">├── middleware&#x2F;    # middleware 目录用于存放应用的中间件</span><br><span class="line">├── pages&#x2F;         # 页面目录 pages 用于组织应用的路由及视图。Nuxt.js 框架读取该目录下所有的 .vue 文件并自动生成对应的路由配置。</span><br><span class="line">├── plugins&#x2F;       # 插件目录 plugins 用于组织那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件</span><br><span class="line">├── server&#x2F;        # </span><br><span class="line">├── static&#x2F;        # 静态文件目录 static 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。 服务器启动的时候，该目录下的文件会映射至应用的根路径 &#x2F; 下</span><br><span class="line">├── store&#x2F;         # 用于组织应用的 Vuex 状态树 文件。 Nuxt.js 框架集成了 Vuex 状态树 的相关功能配置，在 store 目录下创建一个 index.js 文件可激活这些配置</span><br><span class="line">├── nuxt.config.js # 用于组织Nuxt.js 应用的个性化配置，以便覆盖默认配置</span><br><span class="line">├── package.json   # 用于描述应用的依赖关系和对外暴露的脚本接口</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Nuxt.js 默认的配置涵盖了大部分使用情形，可通过 nuxt.config.js 来覆盖默认的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build: &#123;&#125;,       <span class="comment">// 根据服务端需求，自定义 webpack 的构建配置，如babel配置、devServer配置等</span></span><br><span class="line">  cache: <span class="literal">true</span>,     <span class="comment">// 开启组件缓存策略以提升渲染性能</span></span><br><span class="line">  css: [],         <span class="comment">// 配置全局的 CSS 文件、模块、库</span></span><br><span class="line">  dev: <span class="literal">true</span>,       <span class="comment">// 配置 Nuxt.js 应用是开发模式还是生产模式</span></span><br><span class="line">  env: &#123;&#125;,         <span class="comment">// 配置在客户端和服务端共享的环境变量, 通过 process.env.* 或 context.*来使用</span></span><br><span class="line">  generate: &#123;&#125;,    <span class="comment">// 配置 Nuxt.js 应用生成静态站点的具体方式，当运行 nuxt generate 命令或在编码中调用 nuxt.generate() 时，Nuxt.js 会使用 generate 属性的配置</span></span><br><span class="line">  head: &#123;&#125;,        <span class="comment">// 配置应用默认的meta标签</span></span><br><span class="line">  loading: &#123;&#125;,     <span class="comment">// 用于个性化定制 Nuxt.js 使用的加载组件, 在页面切换的时候，Nuxt.js 使用内置的加载组件显示加载进度条。可以定制它的样式，禁用或者创建自己的加载组件</span></span><br><span class="line">  modules: [],     <span class="comment">// modules是Nuxt.js扩展，可以扩展它的核心功能并添加无限的集成</span></span><br><span class="line">  modulesDir: [],  <span class="comment">// 用于设置路径解析的模块目录，例如：webpack resolveLoading，nodeExternal和postcss</span></span><br><span class="line">  plugins: [],     <span class="comment">// 用于配置那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件</span></span><br><span class="line">  rootDir: <span class="string">&#x27;&#x27;</span>,     <span class="comment">// 用于配置 Nuxt.js 应用的根目录，该配置项的一个限制是应用的 node_modules 目录必须在 rootDir 目录内</span></span><br><span class="line">  router: &#123;&#125;,      <span class="comment">// 用于覆盖 Nuxt.js 默认的 vue-router 配置</span></span><br><span class="line">  srcDir: <span class="string">&#x27;&#x27;</span>,      <span class="comment">// 用于配置应用的源码目录路径，默认值为 rootDir 的值</span></span><br><span class="line">  transition: &#123;&#125;   <span class="comment">// 用于个性化配置应用过渡效果属性的默认值，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置。</p><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><p>假设 pages 的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;</span><br><span class="line">--| user&#x2F;</span><br><span class="line">-----| index.vue</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>那么，Nuxt.js 自动生成的路由配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/user/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;user-one&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/user/one&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/user/one.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>在 Nuxt.js 里面定义带参数的动态路由，需要创建对应的以下划线作为前缀的 Vue 文件 或 目录。</p><p>假设 pages 的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;</span><br><span class="line">--| _slug&#x2F;</span><br><span class="line">-----| comments.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users&#x2F;</span><br><span class="line">-----| _id.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>Nuxt.js 生成对应的路由配置表为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;users-id&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/users/:id?&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/users/_id.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/:slug&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/_slug/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;slug-comments&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/:slug/comments&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/_slug/comments.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>定制化默认的 html 模板，只需要在应用根目录下创建一个 app.html 的文件。</p><p>默认模板为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">HTML_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;&#123; HEAD &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">BODY_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; APP &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举个例子，可以修改模板添加 IE 的条件表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt;&lt;html lang=&quot;en-US&quot; class=&quot;lt-ie9 ie9&quot; &#123;&#123; HTML_ATTRS &#125;&#125;&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;</span><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">HTML_ATTRS</span> &#125;&#125;&gt;</span><span class="comment">&lt;!--&lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;&#123; HEAD &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">BODY_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; APP &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>Nuxt.js 允许我们扩展默认的布局，或在 layout 目录下创建自定义的布局。</p><h3 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h3><p>可通过添加 layouts/default.vue 文件来扩展应用的默认布局。需要在布局文件中添加 <code>&lt;nuxt/&gt;</code> 组件用于显示页面的主体内容。</p><p>默认布局的源码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h3><p>通过编辑 layouts/error.vue 文件来定制化错误页面，这个布局文件不需要包含 <code>&lt;nuxt/&gt;</code> 标签。可以把这个布局文件当成是显示应用错误（404，500等）的组件。</p><p>举一个个性化错误页面的例子 layouts/error.vue:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;error.statusCode === 404&quot;</span>&gt;</span>页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>应用发生错误异常<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">&#x27;error&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  layout: <span class="string">&#x27;blog&#x27;</span> <span class="comment">// 可以为错误页面指定自定义的布局</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>页面组件实际上是 Vue 组件，只不过 Nuxt.js 为这些组件添加了一些特殊的配置项（对应 Nuxt.js 提供的功能特性）以便能快速开发通用应用。</p><p>Nuxt.js 为页面提供的特殊配置项：</p><table><thead><tr><th align="center">属性名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">asyncData</td><td align="left">最重要的一个键, 支持异步数据处理，会在组件（限于页面组件）每次加载之前被调用。它可以在服务端或路由更新之前被调用,另外该方法的第一个参数为当前页面组件的上下文对象。Nuxt.js 会将asyncData 返回的数据融合组件 data 方法返回的数据一并返回给当前组件。</td></tr><tr><td align="center">fetch</td><td align="left">与 asyncData 方法类似，用于在渲染页面之前获取数据填充应用的状态树（store）。不同的是 fetch 方法不会设置组件的数据。</td></tr><tr><td align="center">head</td><td align="left">配置当前页面的 Meta 标签</td></tr><tr><td align="center">layout</td><td align="left">指定当前页面使用的布局（layouts 根目录下的布局文件）</td></tr><tr><td align="center">loading</td><td align="left">如果设置为false，则阻止页面自动调用,</td></tr><tr><td align="center">transition</td><td align="left">指定页面切换的过渡动效</td></tr><tr><td align="center">scrollToTop</td><td align="left">渲染页面前是否需要将当前页面滚动至顶部</td></tr><tr><td align="center">validate</td><td align="left">用于校验 动态路由的参数</td></tr><tr><td align="center">middleware</td><td align="left">指定页面的中间件，中间件会在页面渲染之前被调用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ssr </tag>
            
            <tag> nuxt.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue服务器端渲染</title>
      <link href="/2020/08/29/vue-ssr/"/>
      <url>/2020/08/29/vue-ssr/</url>
      
        <content type="html"><![CDATA[<h2 id="1-服务器端渲染-SSR-简介"><a href="#1-服务器端渲染-SSR-简介" class="headerlink" title="1. 服务器端渲染(SSR)简介"></a>1. 服务器端渲染(SSR)简介</h2><h3 id="1-1-什么是服务器端渲染-SSR-？"><a href="#1-1-什么是服务器端渲染-SSR-？" class="headerlink" title="1.1 什么是服务器端渲染(SSR)？"></a>1.1 什么是服务器端渲染(SSR)？</h3><blockquote><ul><li>Vue.js 是构建客户端应用程序的框架</li><li>默认情况下浏览器输出Vue组件，生成DOM并操作DOM</li><li>服务器端渲染则是服务器端生成静态的HTML字符串，浏览器将静态标记“混合”为客户端可交互的应用程序</li><li>服务器渲染的 Vue.js 应用程序也可以被认为是”同构”或”通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行</li></ul></blockquote><h3 id="1-2-为什么使用服务器端渲染-SSR-？"><a href="#1-2-为什么使用服务器端渲染-SSR-？" class="headerlink" title="1.2 为什么使用服务器端渲染(SSR)？"></a>1.2 为什么使用服务器端渲染(SSR)？</h3><p>与传统 SPA（Single-Page Application - 单页应用程序）相比，服务器端渲染(SSR)的优势主要在于：</p><blockquote><ul><li>更好的 SEO</li></ul></blockquote><blockquote><p>搜索引擎爬虫抓取工具可以直接查看完全渲染的页面,如果你的应用程序初始展示 loading 菊花图，然后通过 Ajax 获取内容，抓取工具并不会等待异步完成后再行抓取页面内容。</p></blockquote><blockquote><ul><li>更快的内容到达时间</li></ul></blockquote><blockquote><p>无需等待所有的 JavaScript 都完成下载并执行，才显示服务器渲染的标记，所以你的用户将会更快速地看到完整渲染的页面。</p></blockquote><h3 id="1-3-使用服务器端渲染-SSR-需要权衡的地方"><a href="#1-3-使用服务器端渲染-SSR-需要权衡的地方" class="headerlink" title="1.3 使用服务器端渲染(SSR)需要权衡的地方"></a>1.3 使用服务器端渲染(SSR)需要权衡的地方</h3><blockquote><ul><li>开发条件所限</li></ul></blockquote><blockquote><p>浏览器特定代码，只能在某些生命周期钩子函数中使用；一些外部扩展库可能需要经过特殊处理才能在服务器端使用。</p></blockquote><blockquote><ul><li>涉及构建设置和部署的更多要求</li></ul></blockquote><blockquote><p>与可以部署在任何静态文件服务器上的完全静态单页面应用程序(SPA)不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。</p></blockquote><blockquote><ul><li>更多的服务器端负载</li></ul></blockquote><blockquote><p>在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源(CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic)下使用，请准备相应的服务器负载，并明智地采用缓存策略。</p></blockquote><h3 id="1-4-一个简单的服务器端渲染"><a href="#1-4-一个简单的服务器端渲染" class="headerlink" title="1.4 一个简单的服务器端渲染"></a>1.4 一个简单的服务器端渲染</h3><h4 id="1-4-1-安装依赖"><a href="#1-4-1-安装依赖" class="headerlink" title="1.4.1 安装依赖"></a>1.4.1 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue vue-server-renderer --save</span><br></pre></td></tr></table></figure><h4 id="1-4-2-渲染一个-Vue-实例"><a href="#1-4-2-渲染一个-Vue-实例" class="headerlink" title="1.4.2 渲染一个 Vue 实例"></a>1.4.2 渲染一个 Vue 实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第 1 步：创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：创建一个 renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).createRenderer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 3 步：将 Vue 实例渲染为 HTML</span></span><br><span class="line">renderer.renderToString(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  <span class="built_in">console</span>.log(html)</span><br><span class="line">  <span class="comment">// =&gt; &lt;div data-server-rendered=&quot;true&quot;&gt;Hello World&lt;/div&gt;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 2.5.0+，如果没有传入回调函数，则会返回 Promise：</span></span><br><span class="line">renderer.renderToString(app).then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(html)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-4-3-与服务器集成"><a href="#1-4-3-与服务器集成" class="headerlink" title="1.4.3 与服务器集成"></a>1.4.3 与服务器集成</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).createRenderer()</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      url: req.url</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;访问的 URL 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  renderer.renderToString(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.status(<span class="number">500</span>).end(<span class="string">&#x27;Internal Server Error&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.end(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h4 id="1-4-4-使用页面模板"><a href="#1-4-4-使用页面模板" class="headerlink" title="1.4.4 使用页面模板"></a>1.4.4 使用页面模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意</font> <code>&lt;!--vue-ssr-outlet--&gt;</code> 注释 – 这里将是应用程序 HTML 标记注入的地方。</p><h4 id="1-4-5-使用模板插值"><a href="#1-4-5-使用模板插值" class="headerlink" title="1.4.5 使用模板插值"></a>1.4.5 使用模板插值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    &#123;&#123;&#123; meta &#125;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过传入一个”渲染上下文对象”，作为 renderToString 函数的第二个参数，来提供插值数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  title: <span class="string">&#x27;vue ssr&#x27;</span>,</span><br><span class="line">  meta: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line">renderer.renderToString(app, context, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 页面 title 将会是 &quot;vue ssr&quot;</span></span><br><span class="line">  <span class="comment">// meta 标签也会注入</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-5-服务器端渲染注意事项"><a href="#1-5-服务器端渲染注意事项" class="headerlink" title="1.5 服务器端渲染注意事项"></a>1.5 服务器端渲染注意事项</h3><blockquote><ul><li>为避免造成交叉请求状态污染，每个请求应该都是全新的、独立的应用程序实例。</li><li>由于没有动态更新，所有的生命周期钩子函数中，只有 beforeCreate 和 created 会在服务器端渲染(SSR)过程中被调用。</li><li>通用代码不可接受特定平台的 API，因此如果你的代码中，直接使用了像 window 或 document，这种仅浏览器可用的全局变量，则会在 Node.js 中执行时抛出错误，反之也是如此。</li><li>大多数自定义指令直接操作 DOM，因此会在服务器端渲染(SSR)过程中导致错误。</li><li>浏览器可能会更改的一些特殊的 HTML 结构，例如，浏览器会在 <code>&lt;table&gt;</code> 内部自动注入 <code>&lt;tbody&gt;</code>，然而，由于 Vue 生成的虚拟 DOM(virtual DOM) 不包含 <code>&lt;tbody&gt;</code>，所以会导致无法匹配。</li></ul></blockquote><h2 id="2-服务器端渲染构建步骤"><a href="#2-服务器端渲染构建步骤" class="headerlink" title="2 服务器端渲染构建步骤"></a>2 服务器端渲染构建步骤</h2><p>我们使用 <code>webpack</code> 来处理服务器和客户端的应用程序，大部分源码可以使用通用方式编写，可以使用 <code>webpack</code> 支持的所有功能，一个基本项目可能像是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">│   ├── webpack.base.config.js     # 基本配置文件</span><br><span class="line">│   ├── webpack.client.config.js   # 客户端配置文件</span><br><span class="line">│   ├── webpack.server.config.js   # 服务端配置文件</span><br><span class="line">└── src</span><br><span class="line">    ├── router          </span><br><span class="line">    │    └── index.js              # 路由工厂</span><br><span class="line">    ├── store          </span><br><span class="line">    │    └── index.js              # 状态工厂</span><br><span class="line">    └── components             </span><br><span class="line">    │    ├── comp1.vue             # 组件1</span><br><span class="line">    │    └── copm2.vue             # 组件2</span><br><span class="line">    ├── App.vue                    # 顶级 vue 组件</span><br><span class="line">    ├── index.template.html        # html 模板</span><br><span class="line">    ├── app.js                     # 通用 entry, 根vue实例工厂</span><br><span class="line">    ├── entry-client.js            # client entry</span><br><span class="line">    ├── entry-server.js            # server entry</span><br><span class="line">├── server.js                      # server 服务</span><br></pre></td></tr></table></figure><h3 id="2-1-app-js"><a href="#2-1-app-js" class="headerlink" title="2.1 app.js"></a>2.1 app.js</h3><p><code>app.js</code> 是我们应用程序的「通用 entry」。在纯客户端应用程序中，我们将在此文件中创建根 Vue 实例，并直接挂载到 DOM。但是，对于服务器端渲染(SSR)，责任转移到纯客户端 entry 文件。<code>app.js</code> 简单地使用 export 导出一个 <code>createApp</code> 函数</p><h3 id="2-2-entry-client-js"><a href="#2-2-entry-client-js" class="headerlink" title="2.2 entry-client.js"></a>2.2 entry-client.js</h3><p>客户端 entry 只需创建应用程序，并且将其挂载到 DOM 中</p><h3 id="2-3-entry-server-js"><a href="#2-3-entry-server-js" class="headerlink" title="2.3 entry-server.js"></a>2.3 entry-server.js</h3><p>服务器 entry 使用 default export 导出函数，并在每次渲染中重复调用此函数。此时，除了创建和返回应用程序实例之外，还会执行<code>服务器端路由匹配</code>和<code>服务器端数据预取</code>逻辑。</p><p>对于客户端应用程序和服务器应用程序，我们都要使用 webpack 打包 - 服务器需要「服务器 bundle」然后用于服务器端渲染(SSR)，而「客户端 bundle」会发送给浏览器，用于混合静态标记。</p><p><img src= "/img/loading.gif" data-lazy-src="webpack-bundle.png" alt="webpack打包步骤"></p><h2 id="3-本文将一步步带您构建一个完整的vue-ssr项目"><a href="#3-本文将一步步带您构建一个完整的vue-ssr项目" class="headerlink" title="3 本文将一步步带您构建一个完整的vue ssr项目"></a>3 本文将一步步带您构建一个完整的vue ssr项目</h2><blockquote><ol><li>首先，搭建一个包含交互的简单vue ssr demo，涉及webpack对服务端应用程序和客户端应用程序的打包配置(参考demo1)。</li><li>然后，引入vue-router进行路由相关操作(参考demo2)。</li><li>接着，引入vuex来执行数据预取和状态控制(参考demo3)。</li><li>最后，使用serverBundle和clientBundle进行构建优化(参考demo4)，并在开发环境中进行热重载(参考demo5)。</li></ol></blockquote><h3 id="3-1-搭建一个包含交互的简单vue-ssr-demo"><a href="#3-1-搭建一个包含交互的简单vue-ssr-demo" class="headerlink" title="3.1 搭建一个包含交互的简单vue ssr demo"></a>3.1 搭建一个包含交互的简单vue ssr demo</h3><h4 id="3-1-1-通用代码"><a href="#3-1-1-通用代码" class="headerlink" title="3.1.1 通用代码"></a>3.1.1 通用代码</h4><p><code>components/Comp1.vue</code>，vue组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>组件1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    btnClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;comp1 cilck&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>App.vue</code>作为应用程序模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Comp1</span>&gt;</span><span class="tag">&lt;/<span class="name">Comp1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Comp1 <span class="keyword">from</span> <span class="string">&quot;./components/Comp1&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123; Comp1 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app.js</code>作为创建根vue实例的工厂</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; app &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>entry-server.js</code>作为服务器端应用程序的入口，每次渲染中重复调用此函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; app &#125; = createApp()</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>entry-client.js</code>作为客户端应用程序的入口，将vue实例挂载到dom中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = createApp()</span><br><span class="line">app.$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-1-2-构建配置"><a href="#3-1-2-构建配置" class="headerlink" title="3.1.2 构建配置"></a>3.1.2 构建配置</h4><p>将配置文件分为三个文件：base, client 和 server。基本配置(base config)包含在两个环境共享的配置，例如，输出路径(output path)，别名(alias)和 loader。服务器配置(server config)和客户端配置(client config)，可以通过使用 webpack-merge 来简单地扩展基本配置。</p><p><code>webpack.base.config.js</code>主要包含服务器端应用程序和客户端应用程序打包的共享配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;[name].bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;vue-style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpg|jpeg|png|gif|svg)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">10000</span>    <span class="comment">// 10Kb</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>webpack.server.config.js</code>生成一个库文件，用于创建传递给<code>renderToString</code>的根vue实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  target: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    server: path.resolve(__dirname, <span class="string">&#x27;../src/entry-server.js&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    libraryTarget: <span class="string">&#x27;commonjs2&#x27;</span> <span class="comment">//构建一个可以被其他模块引入的模块，该模块通过commonJS2规范导出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>webpack.client.config.js</code>生成用户激活服务器端静态标记的client bundle</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    client: path.resolve(__dirname, <span class="string">&#x27;../src/entry-client.js&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-1-3-执行构建"><a href="#3-1-3-执行构建" class="headerlink" title="3.1.3 执行构建"></a>3.1.3 执行构建</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build:server&quot;: &quot;webpack --config build/webpack.server.config.js&quot;,</span><br><span class="line">    &quot;build:client&quot;: &quot;webpack --config build/webpack.client.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-4-服务器代码"><a href="#3-1-4-服务器代码" class="headerlink" title="3.1.4 服务器代码"></a>3.1.4 服务器代码</h4><p>在分别执行服务器端应用程序构建和客户端应用程序构建之后生成server bundle和client bundle，用于编写服务器代码。</p><p><code>server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).createRenderer(&#123;</span><br><span class="line">  template: <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).readFileSync(<span class="string">&#x27;./src/index.template.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> createApp = <span class="built_in">require</span>(<span class="string">&#x27;./dist/server.bundle&#x27;</span>).default</span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">  title: <span class="string">&#x27;vue ssr&#x27;</span>,</span><br><span class="line">  meta: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line">server.use(express.static(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">server.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = createApp()</span><br><span class="line">  renderer.renderToString(app, context, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.status(<span class="number">500</span>).end(<span class="string">&#x27;Internal Server Error&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.end(html)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h4 id="3-1-5客户端激活"><a href="#3-1-5客户端激活" class="headerlink" title="3.1.5客户端激活"></a>3.1.5客户端激活</h4><p>客户端激活，指的是 Vue 在浏览器端接管由服务端发送的静态 HTML，使其变为由 Vue 管理的动态 DOM 的过程。</p><p>在客户端入口中，我们通过app.$mount(‘#app’)进行应用程序挂载，由于服务器已经渲染好了 HTML，我们显然无需将其丢弃再重新创建所有的 DOM 元素。相反，我们需要”激活”这些静态的 HTML，然后使他们成为动态的（能够响应后续的数据变化）。</p><p>在服务器渲染的HTML里应用程序根元素上有一个特殊的属性——data-server-rendered，该特殊属性能够让客户端Vue知道这部分Html是由Vue在服务器端渲染的，并且应该以激活模式进行挂载。</p><p>在开发模式下，Vue 将推断客户端生成的虚拟 DOM 树(virtual DOM tree)，是否与从服务器渲染的 DOM 结构(DOM structure)匹配。如果无法匹配，它将退出混合模式，丢弃现有的 DOM 并从头开始渲染。在生产模式下，此检测会被跳过，以避免性能损耗。</p><h3 id="3-2-路由和代码分割"><a href="#3-2-路由和代码分割" class="headerlink" title="3.2 路由和代码分割"></a>3.2 路由和代码分割</h3><p>我们的服务器代码使用了一个 * 处理程序，它接受任意 URL。这允许我们将访问的 URL 传递到我们的 Vue 应用程序中，然后对客户端和服务器复用相同的路由配置。</p><p>使用官方提供的 vue-router，类似于 createApp，我们也需要给每个请求一个新的 router 实例，所以文件导出一个 createRouter 函数</p><p><code>router/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Comp1 <span class="keyword">from</span> <span class="string">&#x27;../components/Comp1.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Comp2 <span class="keyword">from</span> <span class="string">&#x27;../components/Comp2.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    routes: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      redirect: <span class="string">&#x27;/comp1&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      path: <span class="string">&#x27;/comp1&#x27;</span>,</span><br><span class="line">      component: Comp1</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      path: <span class="string">&#x27;/comp2&#x27;</span>,</span><br><span class="line">      component: Comp2</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新<code>app.js</code>，创建router实例注入到根vue实例中并返回router</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建 router 实例</span></span><br><span class="line">  <span class="keyword">const</span> router = createRouter()</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 注入 router 到根 Vue 实例</span></span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 返回 app 和 router</span></span><br><span class="line">  <span class="keyword">return</span> &#123; app, router &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>entry-server.js</code> 中实现服务器端路由逻辑(server-side routing logic)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span></span><br><span class="line">    <span class="comment">// 以便服务器能够等待所有的内容在渲染前，就已经准备就绪。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app, router &#125; = createApp()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器端 router 的位置</span></span><br><span class="line">    router.push(context.url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等到 router 将可能的异步组件和钩子函数解析完</span></span><br><span class="line">    router.onReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents()</span><br><span class="line">      <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">      <span class="keyword">if</span> (!matchedComponents.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span><br><span class="line">      resolve(app)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>router.onReady</code>该方法把一个回调排队，在路由完成初始导航时调用，这意味着它可以解析所有的异步进入钩子和路由初始化相关联的异步组件。这可以有效确保服务端渲染时服务端和客户端输出的一致。</p><p>然后再次进行打包构建，服务器只需将请求的路径设置到渲染上下文中</p><p><code>server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    url: req.url</span><br><span class="line">  &#125;</span><br><span class="line">  createApp(context).then(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3-数据预取和状态"><a href="#3-3-数据预取和状态" class="headerlink" title="3.3 数据预取和状态"></a>3.3 数据预取和状态</h3><h4 id="3-3-1-服务器端数据预取"><a href="#3-3-1-服务器端数据预取" class="headerlink" title="3.3.1 服务器端数据预取"></a>3.3.1 服务器端数据预取</h4><p>在服务器端渲染(SSR)期间，我们本质上是在渲染我们应用程序的”快照”，所以如果应用程序依赖于一些异步数据，那么在开始渲染过程之前，需要先预取和解析好这些数据。</p><p>另一个需要关注的问题是在客户端，在挂载(mount)到客户端应用程序之前，需要获取到与服务器端应用程序完全相同的数据 - 否则，客户端应用程序会因为使用与服务器端应用程序不同的状态，然后导致混合失败。</p><p>为了解决这个问题，获取的数据需要位于视图组件之外，即放置在专门的数据预取存储容器(data store)或”状态容器(state container)）”中。首先，在服务器端，我们可以在渲染之前预取数据，并将数据填充到 store 中。此外，我们将在 HTML 中序列化(serialize)和内联预置(inline)状态。这样，在挂载(mount)到客户端应用程序之前，可以直接从 store 获取到内联预置(inline)状态。</p><p>使用官方提供的状态管理库Vuex，类似于 createApp和createRouter，我们也需要给每个请求一个新的store实例。</p><p><code>store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      username: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      getUsername(&#123; commit &#125;) &#123;</span><br><span class="line">        <span class="comment">// `store.dispatch()`会返回 Promise，以便我们能够知道数据在何时更新</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 模拟异步请求</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;yujihu&#x27;</span>)</span><br><span class="line">          &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> commit(<span class="string">&#x27;setUsername&#x27;</span>, result));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      setUsername(state, username) &#123;</span><br><span class="line">        state.username = username;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新<code>app.js</code>，创建store实例注入到根vue实例中并返回store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建 router 和 store 实例</span></span><br><span class="line">  <span class="keyword">const</span> router = createRouter()</span><br><span class="line">  <span class="keyword">const</span> store = createStore()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 创建应用程序实例，将 router 和 store 注入</span></span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露 app, router 和 store。</span></span><br><span class="line">  <span class="keyword">return</span> &#123; app, router, store &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要通过访问路由，来决定获取哪部分数据 - 这也决定了哪些组件需要渲染。事实上，给定路由所需的数据，也是在该路由上渲染组件时所需的数据。所以在路由组件中放置数据预取逻辑，是很自然的事情。</p><p>我们将在路由组件上暴露出一个自定义静态函数 asyncData。注意，由于此函数会在组件实例化之前调用，所以它无法访问 this。需要将 store 和路由信息作为参数传递进去：<br><code>components/Comp1.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>组件1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  asyncData (&#123; store, route &#125;) &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 触发 action 后，会返回 Promise</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> store.dispatch(<span class="string">&#x27;getUsername&#x27;</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    btnClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;comp1 cilck&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>entry-server.js</code> 中，我们可以通过路由获得与 <code>router.getMatchedComponents()</code> 相匹配的组件，如果组件暴露出 <code>asyncData</code>，我们就调用这个方法。然后我们需要将解析完成的状态，附加到渲染上下文(render context)中。</p><p><code>entry-server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  <span class="comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span></span><br><span class="line">    <span class="comment">// 以便服务器能够等待所有的内容在渲染前，</span></span><br><span class="line">    <span class="comment">// 就已经准备就绪。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app, router, store &#125; = createApp()</span><br><span class="line">    <span class="comment">// 设置服务器端 router 的位置</span></span><br><span class="line">    router.push(context.url)</span><br><span class="line">    <span class="comment">// 等到 router 将可能的异步组件和钩子函数解析完</span></span><br><span class="line">    router.onReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents()</span><br><span class="line">      <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">      <span class="keyword">if</span> (!matchedComponents.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对所有匹配的路由组件调用 `asyncData()`</span></span><br><span class="line">      <span class="built_in">Promise</span>.all(matchedComponents.map(<span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Component.asyncData) &#123;</span><br><span class="line">          <span class="keyword">return</span> Component.asyncData(&#123;</span><br><span class="line">            store,</span><br><span class="line">            route: router.currentRoute</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在所有预取钩子(preFetch hook) resolve 后，</span></span><br><span class="line">        <span class="comment">// 我们的 store 现在已经填充入渲染应用程序所需的状态。</span></span><br><span class="line">        <span class="comment">// 当我们将状态附加到上下文，并且 `template` 选项用于 renderer 时，</span></span><br><span class="line">        <span class="comment">// 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。</span></span><br><span class="line">        context.state = store.state</span><br><span class="line">        resolve(app)</span><br><span class="line">      &#125;).catch(reject)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用 template 时，context.state 将作为 window.__INITIAL_STATE__ 状态，自动嵌入到最终的 HTML 中。而在客户端，在挂载到应用程序之前，store 就应该获取到状态：</p><p><code>entry-client.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, router, store &#125; = createApp()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__INITIAL_STATE__) &#123;</span><br><span class="line">  store.replaceState(<span class="built_in">window</span>.__INITIAL_STATE__)</span><br><span class="line">&#125;</span><br><span class="line">app.$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-3-2-客户端数据预取"><a href="#3-3-2-客户端数据预取" class="headerlink" title="3.3.2 客户端数据预取"></a>3.3.2 客户端数据预取</h4><p>由于服务器端渲染只会进行首屏渲染，后续路由跳转及数据预取则交给客户端应用程序处理。可以在路由导航之前（router.beforeResolve）解析数据，也可以在匹配要渲染的视图后（组件的beforeMount钩子中）再获取数据。</p><blockquote><ol><li>在路由导航之前解析数据</li></ol></blockquote><blockquote><blockquote><p>使用此策略，应用程序会等待视图所需数据全部解析之后，再传入数据并处理当前视图。好处在于，可以直接在数据准备就绪时，传入视图渲染完整内容，但是如果数据预取需要很长时间，用户在当前视图会感受到”明显卡顿”。因此，如果使用此策略，建议提供一个数据加载指示器(data loading indicator)。</p></blockquote></blockquote><blockquote><blockquote><p>我们可以通过检查匹配的组件，并在全局路由钩子函数中执行 asyncData 函数，来在客户端实现此策略。注意，在初始路由准备就绪之后，我们应该注册此钩子，这样我们就不必再次获取服务器提取的数据。</p></blockquote></blockquote><p><code>entry-client.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">router.onReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 添加路由钩子函数，用于处理 asyncData.</span></span><br><span class="line">  <span class="comment">// 在初始路由 resolve 后执行，</span></span><br><span class="line">  <span class="comment">// 以便我们不会二次预取(double-fetch)已有的数据。</span></span><br><span class="line">  <span class="comment">// 使用 `router.beforeResolve()`，以便确保所有异步组件都 resolve。</span></span><br><span class="line">  router.beforeResolve(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = router.getMatchedComponents(to)</span><br><span class="line">    <span class="keyword">const</span> prevMatched = router.getMatchedComponents(<span class="keyword">from</span>)</span><br><span class="line">    <span class="comment">// 我们只关心非预渲染的组件</span></span><br><span class="line">    <span class="comment">// 所以我们对比它们，找出两个匹配列表的差异组件</span></span><br><span class="line">    <span class="keyword">let</span> diffed = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> activated = matched.filter(<span class="function">(<span class="params">c, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> diffed || (diffed = (prevMatched[i] !== c))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!activated.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> next()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里如果有加载指示器(loading indicator)，就触发</span></span><br><span class="line">    <span class="built_in">Promise</span>.all(activated.map(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (c.asyncData) &#123;</span><br><span class="line">        <span class="keyword">return</span> c.asyncData(&#123; store, <span class="attr">route</span>: to &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 停止加载指示器(loading indicator)</span></span><br><span class="line">      next()</span><br><span class="line">    &#125;).catch(next)</span><br><span class="line">  &#125;)</span><br><span class="line">  app.$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>匹配要渲染的视图后，再获取数据<blockquote><p>此策略将客户端数据预取逻辑，放在视图组件的 beforeMount 函数中。当路由导航被触发时，可以立即切换视图，因此应用程序具有更快的响应速度。然而，传入视图在渲染时不会有完整的可用数据。因此，对于使用此策略的每个视图组件，都需要具有条件加载状态。</p></blockquote></li></ol></blockquote><blockquote><blockquote><p>这可以通过纯客户端(client-only)的全局 mixin 来实现：</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; asyncData &#125; = <span class="built_in">this</span>.$options</span><br><span class="line">    <span class="keyword">if</span> (asyncData) &#123;</span><br><span class="line">      <span class="comment">// 将获取数据操作分配给 promise</span></span><br><span class="line">      <span class="comment">// 以便在组件中，我们可以在数据准备就绪后</span></span><br><span class="line">      <span class="comment">// 通过运行 `this.dataPromise.then(...)` 来执行其他任务</span></span><br><span class="line">      <span class="built_in">this</span>.dataPromise = asyncData(&#123;</span><br><span class="line">        store: <span class="built_in">this</span>.$store,</span><br><span class="line">        route: <span class="built_in">this</span>.$route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-利用bundle-renderer优化"><a href="#3-4-利用bundle-renderer优化" class="headerlink" title="3.4 利用bundle renderer优化"></a>3.4 利用bundle renderer优化</h3><p>到目前为止，在每次编辑过应用程序源代码之后，我们都必须重新打包代码并重启服务，这在开发过程中会影响开发效率。此外，Node.js 本身不支持 source map。</p><p><code>vue-server-renderer</code> 提供一个名为 <code>createBundleRenderer</code> 的 API，用于处理此问题，通过使用 webpack 的自定义插件，server bundle 将生成为可传递到 bundle renderer 的特殊 JSON 文件。所创建的 bundle renderer，用法和普通 renderer 相同，但是 bundle renderer 提供以下优点：</p><blockquote><ul><li>内置的 source map 支持（在 webpack 配置中使用 devtool: ‘source-map’）</li><li>在开发环境甚至部署过程中热重载（通过读取更新后的 bundle，然后重新创建 renderer 实例）</li><li>关键 CSS(critical CSS) 注入（在使用 *.vue 文件时）：自动内联在渲染过程中用到的组件所需的CSS。</li><li>使用 clientManifest 进行资源注入：自动推断出最佳的预加载(preload)和预取(prefetch)指令，以及初始渲染所需的代码分割 chunk。</li></ul></blockquote><h4 id="3-4-1-生成server-bundle"><a href="#3-4-1-生成server-bundle" class="headerlink" title="3.4.1 生成server bundle"></a>3.4.1 生成server bundle</h4><p>修改<code>webpack.server.config.js</code>，生成传递给<code>createBundleRenderer</code>的 server bundle。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueSSRServerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer/server-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  target: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    server: path.resolve(__dirname, <span class="string">&#x27;../src/entry-server.js&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    libraryTarget: <span class="string">&#x27;commonjs2&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对 bundle renderer 提供 source map 支持</span></span><br><span class="line">  devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/externals/#function</span></span><br><span class="line">  <span class="comment">// https://github.com/liady/webpack-node-externals</span></span><br><span class="line">  <span class="comment">// 外置化应用程序依赖模块。可以使服务器构建速度更快，</span></span><br><span class="line">  <span class="comment">// 并生成较小的 bundle 文件。</span></span><br><span class="line">  externals: nodeExternals(&#123;</span><br><span class="line">    <span class="comment">// 不要外置化 webpack 需要处理的依赖模块。</span></span><br><span class="line">    <span class="comment">// 你可以在这里添加更多的文件类型。例如，未处理 *.vue 原始文件，</span></span><br><span class="line">    <span class="comment">// 你还应该将修改 `global`（例如 polyfill）的依赖模块列入白名单</span></span><br><span class="line">    whitelist: <span class="regexp">/\.css$/</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 这是将服务器的整个输出</span></span><br><span class="line">  <span class="comment">// 构建为单个 JSON 文件的插件。</span></span><br><span class="line">  <span class="comment">// 默认文件名为 `vue-ssr-server-bundle.json`</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueSSRServerPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打包后会生成<code>vue-ssr-server-bundle.json</code>，传递给<code>createBundleRenderer</code>。</p><h4 id="3-4-2-生成-clientManifest"><a href="#3-4-2-生成-clientManifest" class="headerlink" title="3.4.2 生成 clientManifest"></a>3.4.2 生成 clientManifest</h4><p>除了 server bundle 之外，我们还可以生成客户端构建清单(client build manifest)。使用客户端清单(client manifest)和服务器 bundle(server bundle)，renderer 现在具有了服务器和客户端的构建信息，因此它可以自动推断和注入资源预加载 / 数据预取指令(preload / prefetch directive)，以及 css 链接 / script 标签到所渲染的 HTML。</p><p>带来的好处:</p><blockquote><ol><li>在生成的文件名中有哈希时，可以取代 html-webpack-plugin 来注入正确的资源 URL。</li><li>在通过 webpack 的按需代码分割特性渲染 bundle 时，我们可以确保对 chunk 进行最优化的资源预加载/数据预取，并且还可以将所需的异步 chunk 智能地注入为 <code>&lt;script&gt;</code> 标签，以避免客户端的瀑布式请求(waterfall request)，以及改善可交互时间(TTI - time-to-interactive)。</li></ol></blockquote><p>要使用客户端清单(client manifest)，客户端配置(client config)将如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueSSRClientPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer/client-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    client: path.resolve(__dirname, <span class="string">&#x27;../src/entry-client.js&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 此插件在输出目录中</span></span><br><span class="line">    <span class="comment">// 生成 `vue-ssr-client-manifest.json`。</span></span><br><span class="line">    <span class="keyword">new</span> VueSSRClientPlugin()</span><br><span class="line">  ],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// 将 webpack 运行时分离到一个引导 chunk 中，</span></span><br><span class="line">    <span class="comment">// 以便可以在之后正确注入异步 chunk。</span></span><br><span class="line">    <span class="comment">// 这也为你的 应用程序/vendor 代码提供了更好的缓存。</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      name: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用webpack打包构建后会生成vue-ssr-server-bundle.json和vue-ssr-client-manifest.json，服务器就可已使用createBundleRenderer。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createBundleRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = fs.readFileSync(<span class="string">&#x27;./src/index.template.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> serverBundle = <span class="built_in">require</span>(<span class="string">&#x27;./dist/vue-ssr-server-bundle.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> clientManifest = <span class="built_in">require</span>(<span class="string">&#x27;./dist/vue-ssr-client-manifest.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> renderer = createBundleRenderer(serverBundle, &#123;</span><br><span class="line">  template,</span><br><span class="line">  clientManifest</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-4-3-开发过程热重载，主要使用webpack-hot-middleware和webpack-dev-middleware这两个webpack插件。具体代码请参考demo5-build-setup-dev-server-js和demo5-server-js。"><a href="#3-4-3-开发过程热重载，主要使用webpack-hot-middleware和webpack-dev-middleware这两个webpack插件。具体代码请参考demo5-build-setup-dev-server-js和demo5-server-js。" class="headerlink" title="3.4.3 开发过程热重载，主要使用webpack-hot-middleware和webpack-dev-middleware这两个webpack插件。具体代码请参考demo5/build/setup-dev-server.js和demo5/server.js。"></a>3.4.3 开发过程热重载，主要使用<code>webpack-hot-middleware</code>和<code>webpack-dev-middleware</code>这两个webpack插件。具体代码请参考demo5/build/setup-dev-server.js和demo5/server.js。</h4><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><blockquote><ul><li>服务器端渲染即为服务器生成静态的html字符串，客户端应用程序将静态的html激活为动态的DOM。服务器端渲染通常只会渲染用于请求的第一个url的页面，即只进行首屏渲染，后续则由客户端应用程序激活代理，控制路由、请求及交互。</li><li>服务器渲染的 Vue.js 应用程序也可以被认为是”同构”或”通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行。</li><li>为避免交叉请求造成状态污染的情况，每个请求都应是全新的、独立的应用程序实例。我们会提取一个工厂函数（createApp），用于创建根vue实例。</li><li>所有的生命周期钩子函数中，只有beforeCreate和created会在服务器端渲染(SSR)过程中被调用，其他任何生命周期的代码只会在客户端执行。</li><li>客户端入口（entry-client.js）职责是将根vue实例挂在到dom中，用于将服务器端生成的html激活。</li><li>服务器端入口（entry-server.js）职责是暴露一个创建根vue实例的方法，可以传入服务器端渲染上下文，我们的服务器代码会为每个请求都调用该方法创建根vue实例并生成html。</li><li>关于路由跳转，我们的服务器代码并不会处理请求的url，会透传给服务器端应用程序，由其控制路由跳转。</li><li>关于数据预取，通用的数据预取是服务器端渲染最复杂的问题，分为客户端数据预取和服务器端数据预取。</li><li>服务器端数据预取，针对用户的请求我们需要预取相关的数据然后进行渲染，需要页面组件暴露asyncData方法，在页面渲染前调用路由匹配组件的该方法，填充到vue store中，并挂载到服务器渲染上下文上，生成的页面会自动挂在store中内容，客户端程序只需将其同步到客户端store中。</li><li>客户端数据预取，由于服务器端只进行首屏渲染，后续路由跳转及数据预取则交给客户端应用程序处理。可以在路由导航之前（router.beforeResolve）解析数据，也可以在匹配要渲染的视图后（组件的beforeMount钩子中）再获取数据。</li><li>用webpack对服务器端应用程序和客户端应用程序分别进行打包，生成server bundle用于在服务器生成根vue实例，并进行相应的路由匹配、数据预取逻辑，生成client bundle用于在客户端激活服务器端发送的静态html。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ssr </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
